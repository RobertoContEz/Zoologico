package guis;

import control.ControlRegistrarHabitat;
import java.awt.Graphics;
import java.awt.Image;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import objetos.Habitat;

/**
 *
 * @author R.Pacheco, R.Contreras, E.Villagrana y G.Gaxiola Esta clase
 * representa gráficamente la interacción entre el usuario y el sistema al
 * momento de registrar un habitat
 */
public class DlgRegistrarHabitat extends javax.swing.JDialog {

    private final ControlRegistrarHabitat control = new ControlRegistrarHabitat();

    FondoPanelHabitat fondo = new FondoPanelHabitat();

    public DlgRegistrarHabitat(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.setContentPane(fondo);
        initComponents();

        this.climas = control.recuperaListaClimas();
        this.vegetaciones = control.recuperaListaVegetaciones();
        this.continentes = control.recuperaListaContinentes();

        inicializar();

        continentesAgregados = new ArrayList();
    }

    private final List<String> climas;
    private final List<String> vegetaciones;
    private final List<String> continentes;
    private List<String> continentesAgregados;

    private void inicializar() {
        if (climas == null) {
            JOptionPane.showMessageDialog(this, "Error recuperando los climas.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            comboBoxClima.removeAllItems();
            comboBoxClima.addItem("Seleccione...");
            for (String clima : climas) {
                comboBoxClima.addItem(clima);
            }
        }

        if (vegetaciones == null) {
            JOptionPane.showMessageDialog(this, "Error recuperando los tipos de vegetación.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            comboBoxVegetacion.removeAllItems();
            comboBoxVegetacion.addItem("Seleccione...");
            for (String vegetacion : vegetaciones) {
                comboBoxVegetacion.addItem(vegetacion);
            }
        }

        if (continentes == null) {
            JOptionPane.showMessageDialog(this, "Error recuperando los continentes.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel modeloTabla = (DefaultTableModel) tablaContinentes.getModel();
            modeloTabla.setRowCount(0);
            for (String continente : continentes) {
                Object[] fila = {
                    continente
                };

                modeloTabla.addRow(fila);
            }
        }
    }
    
    private void actualizarContinentes() {
        DefaultTableModel modeloTabla = (DefaultTableModel) tablaContinentesAgregados.getModel();
        modeloTabla.setRowCount(0);
        for (String continente : continentesAgregados) {
            Object[] fila = {
                continente
            };

            modeloTabla.addRow(fila);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboBoxClima = new javax.swing.JComboBox<>();
        comboBoxVegetacion = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        campoNombreHabitat = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnVerificarNombre = new javax.swing.JButton();
        btnGuardarHabitat = new javax.swing.JButton();
        btnCancelarHabitat = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnAgregarContinente = new javax.swing.JButton();
        btnEliminarContinente = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaContinentes = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaContinentesAgregados = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("REGISTRO HÁBITATS");
        setResizable(false);

        jPanel3.setPreferredSize(new java.awt.Dimension(1000, 703));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setPreferredSize(new java.awt.Dimension(469, 198));

        jLabel2.setText("Clima:");

        jLabel3.setText("Vegetación:");

        comboBoxClima.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxClima.setEnabled(false);
        comboBoxClima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxClimaActionPerformed(evt);
            }
        });

        comboBoxVegetacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxVegetacion.setEnabled(false);
        comboBoxVegetacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxVegetacionActionPerformed(evt);
            }
        });

        jLabel4.setText("Nombre:");

        campoNombreHabitat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoNombreHabitatActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Información del hábitat");

        btnVerificarNombre.setText("Verificar");
        btnVerificarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerificarNombreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxClima, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxVegetacion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(campoNombreHabitat))
                .addGap(34, 34, 34)
                .addComponent(btnVerificarNombre)
                .addContainerGap(55, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(campoNombreHabitat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVerificarNombre))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboBoxClima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboBoxVegetacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        btnGuardarHabitat.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnGuardarHabitat.setText("Guardar");
        btnGuardarHabitat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarHabitatActionPerformed(evt);
            }
        });

        btnCancelarHabitat.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnCancelarHabitat.setText("Cancelar");
        btnCancelarHabitat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarHabitatActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnAgregarContinente.setText("Agregar");
        btnAgregarContinente.setEnabled(false);
        btnAgregarContinente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarContinenteActionPerformed(evt);
            }
        });

        btnEliminarContinente.setText("Eliminar");
        btnEliminarContinente.setEnabled(false);
        btnEliminarContinente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarContinenteActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Continentes");

        tablaContinentes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Continentes"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaContinentes);

        tablaContinentesAgregados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Continentes Agregados"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaContinentesAgregados);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminarContinente))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAgregarContinente)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnAgregarContinente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEliminarContinente))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnGuardarHabitat)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(btnCancelarHabitat)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCancelarHabitat)
                    .addComponent(btnGuardarHabitat))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1021, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarHabitatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarHabitatActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelarHabitatActionPerformed

    private void btnGuardarHabitatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarHabitatActionPerformed
        guardar();
    }//GEN-LAST:event_btnGuardarHabitatActionPerformed

    private void campoNombreHabitatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoNombreHabitatActionPerformed
        verificar();
    }//GEN-LAST:event_campoNombreHabitatActionPerformed

    private void btnVerificarNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerificarNombreActionPerformed
        verificar();
    }//GEN-LAST:event_btnVerificarNombreActionPerformed

    private void btnAgregarContinenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarContinenteActionPerformed
        agregarContinente();
    }//GEN-LAST:event_btnAgregarContinenteActionPerformed

    private void btnEliminarContinenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarContinenteActionPerformed
        eliminarContinente();
    }//GEN-LAST:event_btnEliminarContinenteActionPerformed

    private void comboBoxClimaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxClimaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxClimaActionPerformed

    private void comboBoxVegetacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxVegetacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxVegetacionActionPerformed

    private boolean verificar() {
        Habitat habitat = control.verificarExistencia(campoNombreHabitat.getText());
        if (habitat != null) {
            comboBoxClima.setEnabled(false);
            comboBoxVegetacion.setEnabled(false);
            btnAgregarContinente.setEnabled(false);
            btnEliminarContinente.setEnabled(false);

            List<String> listaContinentes = habitat.getContinentesDondeSeEncuentra();
            String continentes = listaContinentes.get(0);
            listaContinentes.remove(0);
            for (String continente : listaContinentes) {
                continentes = continentes + ", " + continente;
            }

            JOptionPane.showMessageDialog(this, "El hábitat ya está registrado.\n"
                    + "Nombre: " + habitat.getNombre() + "\n"
                    + "Clima: " + habitat.getTipoClima() + "\n"
                    + "Vegetación: " + habitat.getTipoVegetacion() + "\n"
                    + "Continentes: " + continentes,
                    "Aviso", JOptionPane.WARNING_MESSAGE);
        } else {
            comboBoxClima.setEnabled(true);
            comboBoxVegetacion.setEnabled(true);
            btnAgregarContinente.setEnabled(true);
            btnEliminarContinente.setEnabled(true);
        }

        return habitat == null;
    }

    private void agregarContinente() {
        int indiceFila = tablaContinentes.getSelectedRow();
        if (indiceFila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un continente de la lista de continentes para agregarlo.", "Aviso", JOptionPane.WARNING_MESSAGE);
        } else {
            continentesAgregados.add(continentes.get(indiceFila));
            continentesAgregados = new ArrayList(new HashSet(continentesAgregados));
            actualizarContinentes();
        }
    }

    private void eliminarContinente() {
        int indiceFila = tablaContinentesAgregados.getSelectedRow();
        if (indiceFila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un continente de la lista de continentes agregados para eliminarlos.", "Aviso", JOptionPane.WARNING_MESSAGE);
        } else {
            continentesAgregados.remove(indiceFila);
            actualizarContinentes();
        }
    }

    private boolean validar() {
        boolean valido = true;
        String errores = "";
        if (campoNombreHabitat.getText().equals("")) {
            errores = errores + (errores.equals("") ? "" : "\n") + "Introduzca el nombre del hábitat.";
            valido = false;
        }
        if (comboBoxClima.getSelectedIndex() == 0) {
            errores = errores + (errores.equals("") ? "" : "\n") + "Seleccione un tipo de clima.";
            valido = false;
        }
        if (comboBoxVegetacion.getSelectedIndex() == 0) {
            errores = errores + (errores.equals("") ? "" : "\n") + "Seleccione un tipo de vegetación.";
            valido = false;
        }
        if (continentesAgregados.isEmpty()) {
            errores = errores + (errores.equals("") ? "" : "\n") + "Seleccione al menos un continente.";
            valido = false;
        }

        if (!valido) {
            JOptionPane.showMessageDialog(this, "Los siguientes campos están sin llenar: \n" + errores, "Aviso", JOptionPane.WARNING_MESSAGE);
        }

        return valido;
    }

    private void guardar() {
        if (verificar() && validar()) {
            Habitat habitat = new Habitat();
            habitat.setNombre(campoNombreHabitat.getText());
            habitat.setTipoClima(climas.get(comboBoxClima.getSelectedIndex() - 1));
            habitat.setTipoVegetacion(vegetaciones.get(comboBoxVegetacion.getSelectedIndex() - 1));
            habitat.setContinentesDondeSeEncuentra(continentesAgregados);
            if (control.guardar(habitat)) {
                JOptionPane.showMessageDialog(this, "Hábitat guardado satisfactoriamente.", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No se ha podido guardar el hábitat.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarContinente;
    private javax.swing.JButton btnCancelarHabitat;
    private javax.swing.JButton btnEliminarContinente;
    private javax.swing.JButton btnGuardarHabitat;
    private javax.swing.JButton btnVerificarNombre;
    private javax.swing.JTextField campoNombreHabitat;
    private javax.swing.JComboBox<String> comboBoxClima;
    private javax.swing.JComboBox<String> comboBoxVegetacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaContinentes;
    private javax.swing.JTable tablaContinentesAgregados;
    // End of variables declaration//GEN-END:variables
    class FondoPanelHabitat extends JPanel {

        private Image imagen;

        @Override
        public void paint(Graphics g) {

            imagen = new ImageIcon(getClass().getResource("/imagenes/FondoRegistrarHabitat.png")).getImage();

            g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);

            setOpaque(false);

            super.paint(g);
        }
    }
}
