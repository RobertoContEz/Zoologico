package guis;

import control.ControlRegistrarItinerario;
import java.awt.Graphics;
import java.awt.Image;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import negocio.Conversiones;
import objetos.Guia;
import objetos.Itinerario;
import objetos.Zona;
import org.bson.types.ObjectId;

/**
 *
 * @author R.Pacheco, R.Contreras, E.Villagrana y G.Gaxiola Esta clase
 * representa gráficamente la interacción entre el usuario y el sistema al
 * momento de registrar un Itinerario
 */
public class DlgRegistrarItinerario extends javax.swing.JDialog {

    private final ControlRegistrarItinerario control = new ControlRegistrarItinerario();

    FondoPanelItinerario fondo = new FondoPanelItinerario();

    public DlgRegistrarItinerario(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.setContentPane(fondo);
        initComponents();

        guias = control.recuperaGuiasRegistrados();
        zonas = control.recuperaZonasZoologico();

        inicializar();
    }

    private final List<Guia> guias;
    private final List<Zona> zonas;
    private List<JCheckBox> cajasZonas;
    private List<JCheckBox> cajas;
    private List<JTextField> campos;

    private void inicializar() {
        cajasZonas = new ArrayList();
        campos = new ArrayList();

        cajasZonas.add(ckbZona1);
        cajasZonas.add(ckbZona2);
        cajasZonas.add(ckbZona3);
        cajasZonas.add(ckbZona4);
        cajasZonas.add(ckbZona5);
        cajasZonas.add(ckbZona6);
        cajasZonas.add(ckbZona7);
        cajasZonas.add(ckbZona8);
        cajasZonas.add(ckbZona9);

        campos.add(this.campoTextoDuracionItinerario);
        campos.add(this.campoTextoLongitudItinerario);
        campos.add(this.campoTextoNumeroVisitantes);
        campos.add(this.campoDom);
        campos.add(this.campoJue);
        campos.add(this.campoLun);
        campos.add(this.campoMar);
        campos.add(this.campoMie);
        campos.add(this.campoSab);
        campos.add(this.campoVie);

        cajas = new ArrayList(cajasZonas);
        cajas.add(this.checkBoxLunes);
        cajas.add(this.checkBoxMartes);
        cajas.add(this.checkBoxMiercoles);
        cajas.add(this.checkBoxJueves);
        cajas.add(this.checkBoxViernes);
        cajas.add(this.checkBoxSabado);
        cajas.add(this.checkBoxDomingo);

        if (zonas != null) {
            for (int i = 0; i < cajasZonas.size(); i++) {
                cajasZonas.get(i).setText(zonas.get(i).getNombre());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error recuperando las zonas.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

        if (guias == null) {
            JOptionPane.showMessageDialog(this, "Error recuperando los guías.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            cmbGuia.removeAllItems();
            cmbGuia.addItem("Seleccione...");
            for (Guia guia : guias) {
                cmbGuia.addItem(guia.getNombre());
            }
        }

        liberarCampos(false);
    }

    private void liberarCampos(boolean b) {
        for (JCheckBox caja : cajas) {
            caja.setEnabled(b);
        }
        for (JTextField campo : campos) {
            campo.setEditable(b);
        }
        cmbGuia.setEnabled(b);
        btnGuardarItinerario.setEnabled(b);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btnBuscarItinerario = new javax.swing.JButton();
        campoTextoNombreItinerario = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        campoTextoDuracionItinerario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        campoTextoLongitudItinerario = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        campoTextoNumeroVisitantes = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cmbGuia = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        checkBoxDomingo = new javax.swing.JCheckBox();
        checkBoxSabado = new javax.swing.JCheckBox();
        checkBoxViernes = new javax.swing.JCheckBox();
        checkBoxJueves = new javax.swing.JCheckBox();
        checkBoxMiercoles = new javax.swing.JCheckBox();
        checkBoxMartes = new javax.swing.JCheckBox();
        checkBoxLunes = new javax.swing.JCheckBox();
        campoMie = new javax.swing.JTextField();
        campoJue = new javax.swing.JTextField();
        campoMar = new javax.swing.JTextField();
        campoVie = new javax.swing.JTextField();
        campoSab = new javax.swing.JTextField();
        campoDom = new javax.swing.JTextField();
        campoLun = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        ckbZona1 = new javax.swing.JCheckBox();
        ckbZona4 = new javax.swing.JCheckBox();
        ckbZona7 = new javax.swing.JCheckBox();
        ckbZona2 = new javax.swing.JCheckBox();
        ckbZona5 = new javax.swing.JCheckBox();
        ckbZona8 = new javax.swing.JCheckBox();
        ckbZona3 = new javax.swing.JCheckBox();
        ckbZona6 = new javax.swing.JCheckBox();
        ckbZona9 = new javax.swing.JCheckBox();
        btnGuardarItinerario = new javax.swing.JButton();
        btnRegresarItinerario = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("REGISTRAR/ACTUALIZAR ITINERARIO DE RECORRIDO");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnBuscarItinerario.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnBuscarItinerario.setText("Buscar");
        btnBuscarItinerario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarItinerarioActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Nombre itinerario:");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("Duración (minutos):");

        campoTextoDuracionItinerario.setEditable(false);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Longitud (metros):");

        campoTextoLongitudItinerario.setEditable(false);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setText("Num. visitantes autorizados:");

        campoTextoNumeroVisitantes.setEditable(false);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("DATOS GENERALES DEL RECORRIDO");

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel8.setText("Guía:");

        cmbGuia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(campoTextoNombreItinerario, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel8))
                                        .addGap(80, 80, 80)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(campoTextoDuracionItinerario, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cmbGuia, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(campoTextoLongitudItinerario, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                                            .addComponent(campoTextoNumeroVisitantes))))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscarItinerario)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(btnBuscarItinerario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(campoTextoNombreItinerario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cmbGuia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(campoTextoDuracionItinerario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(campoTextoLongitudItinerario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(campoTextoNumeroVisitantes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("DÍAS DEL RECORRIDO");

        checkBoxDomingo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        checkBoxDomingo.setText("Domingo");
        checkBoxDomingo.setEnabled(false);

        checkBoxSabado.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        checkBoxSabado.setText("Sábado");
        checkBoxSabado.setEnabled(false);

        checkBoxViernes.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        checkBoxViernes.setText("Viernes");
        checkBoxViernes.setEnabled(false);

        checkBoxJueves.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        checkBoxJueves.setText("Jueves");
        checkBoxJueves.setEnabled(false);

        checkBoxMiercoles.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        checkBoxMiercoles.setText("Miércoles");
        checkBoxMiercoles.setEnabled(false);

        checkBoxMartes.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        checkBoxMartes.setText("Martes");
        checkBoxMartes.setEnabled(false);

        checkBoxLunes.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        checkBoxLunes.setText("Lunes");
        checkBoxLunes.setEnabled(false);
        checkBoxLunes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxLunesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkBoxMartes)
                                    .addComponent(checkBoxMiercoles)
                                    .addComponent(checkBoxJueves)
                                    .addComponent(checkBoxViernes)
                                    .addComponent(checkBoxSabado)
                                    .addComponent(checkBoxDomingo))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(campoMar, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(campoMie, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(campoJue, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(campoVie)
                                            .addComponent(campoSab)
                                            .addComponent(campoDom)))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(checkBoxLunes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(campoLun, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(jLabel6)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxLunes)
                    .addComponent(campoLun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxMartes)
                    .addComponent(campoMar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxMiercoles)
                    .addComponent(campoMie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxJueves)
                    .addComponent(campoJue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxViernes)
                    .addComponent(campoVie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxSabado)
                    .addComponent(campoSab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxDomingo)
                    .addComponent(campoDom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("ZONAS DEL RECORRIDO");

        ckbZona1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ckbZona1.setText("1-ALFA");
        ckbZona1.setEnabled(false);

        ckbZona4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ckbZona4.setText("2-ALFA");
        ckbZona4.setEnabled(false);

        ckbZona7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ckbZona7.setText("3-ALFA");
        ckbZona7.setEnabled(false);

        ckbZona2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ckbZona2.setText("1-BETA");
        ckbZona2.setEnabled(false);

        ckbZona5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ckbZona5.setText("2-BETA");
        ckbZona5.setEnabled(false);

        ckbZona8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ckbZona8.setText("3-BETA");
        ckbZona8.setEnabled(false);

        ckbZona3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ckbZona3.setText("1-CHARLIE");
        ckbZona3.setEnabled(false);

        ckbZona6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ckbZona6.setText("2-CHARLIE");
        ckbZona6.setEnabled(false);

        ckbZona9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ckbZona9.setText("3-CHARLIE");
        ckbZona9.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(321, 321, 321))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(247, 247, 247)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ckbZona4)
                    .addComponent(ckbZona1)
                    .addComponent(ckbZona7))
                .addGap(55, 55, 55)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(ckbZona2)
                        .addGap(58, 58, 58)
                        .addComponent(ckbZona3))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ckbZona5)
                            .addComponent(ckbZona8))
                        .addGap(58, 58, 58)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ckbZona6)
                            .addComponent(ckbZona9))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckbZona1)
                    .addComponent(ckbZona2)
                    .addComponent(ckbZona3))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckbZona4)
                    .addComponent(ckbZona5)
                    .addComponent(ckbZona6))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckbZona7)
                    .addComponent(ckbZona8)
                    .addComponent(ckbZona9))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        btnGuardarItinerario.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnGuardarItinerario.setText("Guardar");
        btnGuardarItinerario.setEnabled(false);
        btnGuardarItinerario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarItinerarioActionPerformed(evt);
            }
        });

        btnRegresarItinerario.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnRegresarItinerario.setText("Regresar");
        btnRegresarItinerario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarItinerarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(183, 183, 183)
                .addComponent(btnGuardarItinerario)
                .addGap(331, 331, 331)
                .addComponent(btnRegresarItinerario)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardarItinerario)
                    .addComponent(btnRegresarItinerario))
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void checkBoxLunesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxLunesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxLunesActionPerformed

    private void btnBuscarItinerarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarItinerarioActionPerformed
        buscar();
    }//GEN-LAST:event_btnBuscarItinerarioActionPerformed

    private void btnRegresarItinerarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarItinerarioActionPerformed
        dispose();
    }//GEN-LAST:event_btnRegresarItinerarioActionPerformed

    private void btnGuardarItinerarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarItinerarioActionPerformed
        guardar();
    }//GEN-LAST:event_btnGuardarItinerarioActionPerformed

    private void buscar() {
        Itinerario itinerario = control.buscarItinerario(campoTextoNombreItinerario.getText());
        if (itinerario != null) {
            inicializar();

            int indiceGuia = relacionarGuia(itinerario);
            if (indiceGuia == -1) {
                JOptionPane.showMessageDialog(this, "No se ha encontrado el guía del itinerario.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
            this.cmbGuia.setSelectedIndex(indiceGuia + 1);

            this.campoTextoDuracionItinerario.setText(String.valueOf(itinerario.getDuracionDelRecorrido()));
            this.campoTextoLongitudItinerario.setText(String.valueOf(itinerario.getLongitud()));
            this.campoTextoNumeroVisitantes.setText(String.valueOf(itinerario.getNumeroMaximoVisitantes()));

            for (int i = 0; i < cajasZonas.size(); i++) {
                if (itinerario.getIdsZonasVisitadas().contains(zonas.get(i).getId())) {
                    cajasZonas.get(i).setSelected(true);
                }
            }

            List<LocalDateTime> horas = itinerario.getDiasYHoras();
            for (LocalDateTime hora : horas) {
                JTextField campo = null;
                JCheckBox caja = null;
                switch (hora.getDayOfWeek().getValue()) {
                    case 1:
                        campo = this.campoLun;
                        caja = this.checkBoxLunes;
                        break;
                    case 2:
                        campo = this.campoMar;
                        caja = this.checkBoxMartes;
                        break;
                    case 3:
                        campo = this.campoMie;
                        caja = this.checkBoxMiercoles;
                        break;
                    case 4:
                        campo = this.campoJue;
                        caja = this.checkBoxJueves;
                        break;
                    case 5:
                        campo = this.campoVie;
                        caja = this.checkBoxViernes;
                        break;
                    case 6:
                        campo = this.campoSab;
                        caja = this.checkBoxSabado;
                        break;
                    case 7:
                        campo = this.campoDom;
                        caja = this.checkBoxDomingo;
                        break;
                }
                agregarHoraAlCampo(campo, hora);
                caja.setSelected(true);
            }

        } else {
            JOptionPane.showMessageDialog(this, "No se ha encontrado otro itinerario con ese nombre.\n"
                    + "Se van a habilitar los campos para el registro.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            liberarCampos(true);
        }

    }

    private void agregarHoraAlCampo(JTextField campo, LocalDateTime hora) {
        String texto = campo.getText();

        texto = texto + (texto.equals("") ? "" : ", ") + Conversiones.horaATexto(hora);

        campo.setText(texto);
    }

    private int relacionarGuia(Itinerario itinerario) {
        int indice = -1;
        for (int i = 0; i < guias.size(); i++) {
            for (ObjectId idItinerario : guias.get(i).getItinerariosActuales()) {
                if (itinerario.getId().equals(idItinerario)) {
                    indice = i;
                }
            }
        }
        return indice;
    }

    private boolean validar() {
        boolean valido = true;
        String vacios = "";
        String errores = "";

        if (campoTextoNombreItinerario.getText().equals("")) {
            vacios = vacios + (vacios.equals("") ? "" : "\n") + "Introduzca el nombre del hábitat.";
            valido = false;
        } else {
            Itinerario itinerario = control.buscarItinerario(campoTextoNombreItinerario.getText());
            if (itinerario != null) {
                errores = errores + (errores.equals("") ? "" : "\n") + "El nombre del itinerario ya está registrado en la base de datos.";
            }
        }

        if (this.cmbGuia.getSelectedIndex() == 0) {
            errores = errores + (errores.equals("") ? "" : "\n") + "Seleccione el guía del itinerario.";
            valido = false;
        }

        if (this.campoTextoDuracionItinerario.getText().equals("")) {
            vacios = vacios + (vacios.equals("") ? "" : "\n") + "Ingrese la duración del recorrido.";
            valido = false;
        } else {
            try {
                int i = Integer.parseInt(campoTextoDuracionItinerario.getText());
                if (i < 0) {
                    errores = errores + (errores.equals("") ? "" : "\n") + "La duracción del recorrido debe ser mayor a 0.";
                    valido = false;
                }
                if (i > 90) {
                    errores = errores + (errores.equals("") ? "" : "\n") + "La duracción del recorrido debe ser menor a hora y media.";
                    valido = false;
                }
            } catch (Exception e) {
                errores = errores + (errores.equals("") ? "" : "\n") + "Introduzca un número entero para la duración.";
                valido = false;
            }
        }

        if (this.campoTextoLongitudItinerario.getText().equals("")) {
            vacios = vacios + (vacios.equals("") ? "" : "\n") + "Ingrese la longitud del recorrido.";
            valido = false;
        } else {
            try {
                int i = Integer.parseInt(campoTextoLongitudItinerario.getText());
                if (i < 0) {
                    errores = errores + (errores.equals("") ? "" : "\n") + "La longitud del recorrido debe ser mayor a 0m.";
                    valido = false;
                }
                if (i > 1500) {
                    errores = errores + (errores.equals("") ? "" : "\n") + "La longitud del recorrido debe ser menor a 1.5km.";
                    valido = false;
                }
            } catch (Exception e) {
                errores = errores + (errores.equals("") ? "" : "\n") + "Introduzca un número entero para la longitud.";
                valido = false;
            }
        }

        if (this.campoTextoNumeroVisitantes.getText().equals("")) {
            vacios = vacios + (vacios.equals("") ? "" : "\n") + "Ingrese la cantidad máxima de visitantes autorizados para el recorrido.";
            valido = false;
        } else {
            try {
                int i = Integer.parseInt(campoTextoNumeroVisitantes.getText());
                if (i < 0) {
                    errores = errores + (errores.equals("") ? "" : "\n") + "El número de visitantes debe ser mayor a 0m.";
                    valido = false;
                }
                if (i > 30) {
                    errores = errores + (errores.equals("") ? "" : "\n") + "El número máximo de visitantes ser menor a 30.";
                    valido = false;
                }
            } catch (Exception e) {
                errores = errores + (errores.equals("") ? "" : "\n") + "Introduzca un número entero para el máximo de visitantes.";
                valido = false;
            }
        }

        try {
            List<LocalDateTime> horas = bajarHoras();
            if (horas.isEmpty()) {
                vacios = vacios + (vacios.equals("") ? "" : "\n") + "Ingrese al menos una hora.";
            }
            valido = false;
        } catch (Exception e) {
            errores = errores + (errores.equals("") ? "" : "\n") + "Verifique el formato de las horas, deve de ser hh:mm,\nseparando las distintas horas con una coma y un espacio.";
            valido = false;
        }

        if (bajarZonas().isEmpty()) {
            vacios = vacios + (vacios.equals("") ? "" : "\n") + "Seleccione al menos una zona.";
            valido = false;
        }

        if (!valido) {
            vacios = (vacios.equals("") ? "" : "Los siguientes campos están sin llenar: \n" + vacios);
            errores = (errores.equals("") ? "" : "Hay errores en los siguientes campos: \n" + errores);
            JOptionPane.showMessageDialog(this, vacios + errores, "Aviso", JOptionPane.WARNING_MESSAGE);
        }

        return valido;
    }

    private void guardar() {
        if (validar()) {
            Itinerario itinerario = new Itinerario();
            itinerario.setNombre(campoTextoNombreItinerario.getText());
            itinerario.setIdsZonasVisitadas(bajarZonas());
            itinerario.setDuracionDelRecorrido(Integer.parseInt(this.campoTextoDuracionItinerario.getText()));
            itinerario.setDiasYHoras(bajarHoras());
            itinerario.setLongitud(Long.parseLong(this.campoTextoLongitudItinerario.getText()));
            itinerario.setNumeroMaximoVisitantes(Integer.parseInt(this.campoTextoDuracionItinerario.getText()));
            itinerario.setNumeroEspeciesVisitadas(control.calcularEspeciesVisitadas(itinerario.getIdsZonasVisitadas()));

            if (control.guardar(itinerario)) {
                JOptionPane.showMessageDialog(this, "Itinerario guardado satisfactoriamente.", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
                control.actualizarGuia(itinerario.getId(), guias.get(this.cmbGuia.getSelectedIndex() - 1).getId());
            } else {
                JOptionPane.showMessageDialog(this, "No se ha podido guardar el itinerario.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private List<ObjectId> bajarZonas() {
        List<ObjectId> zonas = new ArrayList();
        for (int i = 0; i < this.cajasZonas.size(); i++) {
            if (cajasZonas.get(i).isSelected()) {
                zonas.add(zonas.get(i));
            }
        }
        return zonas;
    }

    private List<LocalDateTime> bajarHoras() {
        List<LocalDateTime> horas = new ArrayList();

        if (checkBoxLunes.isSelected()) {
            String[] textos = this.campoLun.getText().split(", ");
            for (String texto : textos) {
                horas.add(Conversiones.textoAHora(texto).atDate(LocalDate.of(2022, 5, 9)));
            }
        }
        if (checkBoxMartes.isSelected()) {
            String[] textos = this.campoMar.getText().split(", ");
            for (String texto : textos) {
                horas.add(Conversiones.textoAHora(texto).atDate(LocalDate.of(2022, 5, 10)));
            }
        }
        if (checkBoxMiercoles.isSelected()) {
            String[] textos = this.campoMie.getText().split(", ");
            for (String texto : textos) {
                horas.add(Conversiones.textoAHora(texto).atDate(LocalDate.of(2022, 5, 11)));
            }
        }
        if (checkBoxJueves.isSelected()) {
            String[] textos = this.campoJue.getText().split(", ");
            for (String texto : textos) {
                horas.add(Conversiones.textoAHora(texto).atDate(LocalDate.of(2022, 5, 12)));
            }
        }
        if (checkBoxViernes.isSelected()) {
            String[] textos = this.campoVie.getText().split(", ");
            for (String texto : textos) {
                horas.add(Conversiones.textoAHora(texto).atDate(LocalDate.of(2022, 5, 13)));
            }
        }
        if (checkBoxSabado.isSelected()) {
            String[] textos = this.campoSab.getText().split(", ");
            for (String texto : textos) {
                horas.add(Conversiones.textoAHora(texto).atDate(LocalDate.of(2022, 5, 14)));
            }
        }
        if (checkBoxDomingo.isSelected()) {
            String[] textos = this.campoLun.getText().split(", ");
            for (String texto : textos) {
                horas.add(Conversiones.textoAHora(texto).atDate(LocalDate.of(2022, 5, 15)));
            }
        }

        return new ArrayList(new HashSet(horas));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarItinerario;
    private javax.swing.JButton btnGuardarItinerario;
    private javax.swing.JButton btnRegresarItinerario;
    private javax.swing.JTextField campoDom;
    private javax.swing.JTextField campoJue;
    private javax.swing.JTextField campoLun;
    private javax.swing.JTextField campoMar;
    private javax.swing.JTextField campoMie;
    private javax.swing.JTextField campoSab;
    private javax.swing.JTextField campoTextoDuracionItinerario;
    private javax.swing.JTextField campoTextoLongitudItinerario;
    private javax.swing.JTextField campoTextoNombreItinerario;
    private javax.swing.JTextField campoTextoNumeroVisitantes;
    private javax.swing.JTextField campoVie;
    private javax.swing.JCheckBox checkBoxDomingo;
    private javax.swing.JCheckBox checkBoxJueves;
    private javax.swing.JCheckBox checkBoxLunes;
    private javax.swing.JCheckBox checkBoxMartes;
    private javax.swing.JCheckBox checkBoxMiercoles;
    private javax.swing.JCheckBox checkBoxSabado;
    private javax.swing.JCheckBox checkBoxViernes;
    private javax.swing.JCheckBox ckbZona1;
    private javax.swing.JCheckBox ckbZona2;
    private javax.swing.JCheckBox ckbZona3;
    private javax.swing.JCheckBox ckbZona4;
    private javax.swing.JCheckBox ckbZona5;
    private javax.swing.JCheckBox ckbZona6;
    private javax.swing.JCheckBox ckbZona7;
    private javax.swing.JCheckBox ckbZona8;
    private javax.swing.JCheckBox ckbZona9;
    private javax.swing.JComboBox<String> cmbGuia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables

    class FondoPanelItinerario extends JPanel {

        private Image imagen;

        @Override
        public void paint(Graphics g) {

            imagen = new ImageIcon(getClass().getResource("/imagenes/FondoMenuPrincipal.jpg")).getImage();

            g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);

            setOpaque(false);

            super.paint(g);
        }
    }

}
